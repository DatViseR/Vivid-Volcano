---
title: "Problem z danymi Bartka"
author: "Tomek Stępkowski"
format:
  html:
    embed-resources: true
---

```{r}
library(readr)
library(dplyr)
stats_DESeq2_small <-  read_delim("C:/Users/dzdzs/Downloads/stats_DESeq2_small.csv", 
                                          delim = "\t", escape_double = FALSE, 
                                          trim_ws = TRUE)

glimpse(stats_DESeq2_small)

```

Poza nadmiarowymi tabami, które robią "niewidzialne kolumny" jest dużo non-numeric values w Twoich danych w kolumnach, gdzie ich nie powinno być. Poniżej funkcja diagnostyczna i wyniki:

```{r}
diagnose_dataframe_v4 <- function(df, remove_issues = FALSE) {
  # Define keywords for identifying numeric-like columns
  keywords <- c("log", "fold", "pvalue", "padj", "mean", "std", "variance", 
                "count", "value", "diff", "change", "ratio", "score", "rank")
  
  # Identify potential numeric columns based on keywords
  potential_numeric_cols <- grep(
    paste(keywords, collapse = "|"), 
    colnames(df), 
    value = TRUE, 
    ignore.case = TRUE
  )
  
  # If there are no columns that look numeric, return early
  if (length(potential_numeric_cols) == 0) {
    message("No numeric-like columns detected.")
    issues <<- NULL
    trimmed_df <<- df
    return()
  }
  
  # Check each column for non-numeric entries
  issues_list <- lapply(potential_numeric_cols, function(col) {
    # invalid_rows: rows where as.numeric() goes to NA but original data was not NA
    invalid_rows <- which(!is.na(df[[col]]) & is.na(as.numeric(df[[col]])))
    
    if (length(invalid_rows) > 0) {
      list(
        invalid_rows = invalid_rows,
        invalid_values = df[[col]][invalid_rows]
      )
    } else {
      NULL
    }
  })
  
  # Instead of removing columns that have no issues, we keep them all
  # and assign a "no issues" message for columns that don't have invalid entries.
  for (i in seq_along(issues_list)) {
    if (is.null(issues_list[[i]])) {
      issues_list[[i]] <- "no issues"
    }
  }
  names(issues_list) <- potential_numeric_cols
  
  # Assign issues list to the global environment
  issues <<- issues_list
  
  # Determine whether there are any real issues (list entries) vs. "no issues"
  any_issues <- any(vapply(issues_list, is.list, logical(1)))
  
  # If no columns actually have issues, just assign the original data
  if (!any_issues) {
    message("No issues found in numeric-like columns.")
    trimmed_df <<- df
  } else {
    # Show which columns had problems
    message("Issues found in the following columns:")
    # Print only the entries that are actual lists (with invalid rows)
    print(issues_list[vapply(issues_list, is.list, logical(1))])
    
    if (remove_issues) {
      # Collect unique rows that had invalid data
      problematic_rows <- unique(unlist(lapply(issues_list, function(x) {
        if (is.list(x)) x$invalid_rows else NULL
      })))
      message(sprintf("Removing %d problematic rows.", length(problematic_rows)))
      
      # Remove problematic rows from the entire dataset so we keep all columns
      new_df <- df[-problematic_rows, ]
      
      # Coerce each *problematic* column to numeric after removing invalid rows
      columns_with_issues <- names(issues_list[vapply(issues_list, is.list, logical(1))])
      for (col_name in columns_with_issues) {
        new_df[[col_name]] <- as.numeric(new_df[[col_name]])
      }
      
      # Assign the final trimmed dataframe
      trimmed_df <<- new_df
    } else {
      trimmed_df <<- df
    }
  }
}

```

Poniżej lista obserwacji z błędnymi wartościami - funkcja zapisuje też oszyszczoną wersję dataframe.

```{r}

diagnose_dataframe_v4(stats_DESeq2_small, remove_issues = T)
str(trimmed_df)

```

Teraz zapiszmy te dane w csv do zainputowania w Vivid Volcano

```{r}
# saving to csv

write.csv(trimmed_df, "cleaned_barteks.csv")

```

Ten csv działa w aplikacji ale jest kolejny problem - absurdalne wartości log2Fold w danych przez co wykres wygląda tak:

![](images/clipboard-1118121615.png)

```{r}
hist(trimmed_df$log2FoldChange_WT_KAISO_WT_CTRL)


```

Jest 1871 wartości powyżej x1000 absolutnej nadekspresji

```{r}
trimmed_df %>% filter(log2FoldChange_WT_KAISO_WT_CTRL > 10 | log2FoldChange_WT_KAISO_WT_CTRL < -10 )

```

Po usunięciu tych danych otrzymujemy sensownie wyglądający wykres

```{r}
trimmed_df2 <- trimmed_df %>% filter(log2FoldChange_WT_KAISO_WT_CTRL < 10 & log2FoldChange_WT_KAISO_WT_CTRL >-10)

```

```{r}
write.csv(trimmed_df2, "Bartek2.csv")

```

Volcano plot wygenerowany z powyższych oczyszczonych wartości - po usunięciu błędów i danych z ekspresją \> abs(10 ) jest 26432 obserwacji więc sensownie.

![](images/clipboard-604128060.png)
