% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vivid_functions.R
\name{identify_top_go_enrichment}
\alias{identify_top_go_enrichment}
\title{Identify top enriched GO categories for multiple sets of regulated genes}
\usage{
identify_top_go_enrichment(
  detected_genes,
  regulated_sets,
  go_filtered,
  ontology,
  p_adj_method = "BH",
  alpha = 0.05,
  max_categories = 10,
  min_genes_in_term = 5,
  max_genes_in_term = 500,
  min_fold_enrichment = 1.5,
  log_messages_rv = NULL,
  log_event = NULL
)
}
\arguments{
\item{detected_genes}{A character vector of all genes detected in the experiment (background set).}

\item{regulated_sets}{A named list of character vectors containing regulated genes.
Names should be "up", "down", and/or "bidirectional".
Example: list(up = c("gene1", "gene2"), down = c("gene3", "gene4"))}

\item{go_filtered}{A data frame containing filtered GO annotations with columns:
\itemize{
  \item name - GO term name/ID
  \item gene - Gene identifier
  \item ontology - GO category (P: Process, F: Function, C: Component)
}}

\item{ontology}{Character string specifying the GO category to analyze ("P", "F", or "C").}

\item{p_adj_method}{Method for p-value adjustment. Default: "BH" (Benjamini-Hochberg).
See ?p.adjust for available methods.}

\item{alpha}{Significance level threshold after p-value adjustment. Default: 0.05}

\item{max_categories}{Maximum number of top enriched categories to return. Default: 10}

\item{min_genes_in_term}{Minimum number of genes required in a GO term. Default: 5}

\item{max_genes_in_term}{Maximum number of genes allowed in a GO term. Default: 500}

\item{min_fold_enrichment}{Minimum fold enrichment required. Default: 1.5}

\item{log_messages_rv}{Optional reactiveValues object for Shiny app logging.}

\item{log_event}{Optional function for logging events in Shiny app.}
}
\value{
A list containing four elements:
\describe{
  \item{top_results}{A list of data frames (one per gene set) containing significantly
        enriched GO terms that pass all filters, sorted by adjusted p-value}
  \item{all_results}{A list of data frames (one per gene set) containing all tested
        GO terms and their statistics}
  \item{top10_results}{A list of data frames (one per gene set) containing the top 10
        GO terms sorted by significance, regardless of filtering criteria}
  \item{missing_genes}{Character vector of input genes without GO annotations}
}

Each results data frame contains the following columns:
\describe{
  \item{name}{GO term name/ID}
  \item{gene_set}{Name of the gene set (up/down/bidirectional)}
  \item{total_count}{Total number of genes associated with the GO term}
  \item{genes_in_term}{Semicolon-separated list of all genes in the term}
  \item{regulated_count}{Number of regulated genes in the term}
  \item{regulated_genes}{Semicolon-separated list of regulated genes in the term}
  \item{expected_count}{Expected number of genes by chance}
  \item{fold_enrichment}{Observed/Expected ratio}
  \item{p_value}{Raw p-value from hypergeometric test}
  \item{p_adj}{Adjusted p-value}
}
}
\description{
Performs Gene Ontology (GO) enrichment analysis using hypergeometric testing for multiple
sets of regulated genes (up-regulated, down-regulated, and bidirectionally regulated).
The function implements multiple testing correction and various filtering criteria to
identify statistically significant GO terms.
}
\details{
The function performs the following steps:
1. Validates input parameters and GO annotations
2. Calculates background statistics for GO terms
3. Processes each gene set (up/down/bidirectional) separately
4. Performs hypergeometric testing for enrichment
5. Adjusts p-values for multiple testing
6. Filters results based on significance criteria
7. Returns both top significant terms and complete analysis results
}
\examples{
\dontrun{
# Prepare input data
detected <- c("gene1", "gene2", "gene3", "gene4", "gene5")
regulated <- list(
  up = c("gene1", "gene2"),
  down = c("gene3", "gene4")
)
go_data <- data.frame(
  name = c("GO:0001", "GO:0002"),
  gene = c("gene1", "gene2"),
  ontology = c("P", "P")
)

# Run enrichment analysis
results <- identify_top_go_enrichment(
  detected_genes = detected,
  regulated_sets = regulated,
  go_filtered = go_data,
  ontology = "P"
)
}

}
\seealso{
\code{\link[stats]{p.adjust}} for p-value adjustment methods
}
